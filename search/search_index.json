{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.</p>"},{"location":"lab1/#_1","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/#mainpy","title":"main.py:","text":"<pre><code>import uvicorn\nfrom fastapi import FastAPI\n#from models.main_models import *\nfrom db import init_db, engine\nfrom endpoints.user_endpoints import user_router\nfrom endpoints.main_endpoints import main_router\n\napp = FastAPI()\n\napp.include_router(user_router)\napp.include_router(main_router, prefix=\"/api\")\n\n\n# def create_db_and_tables():\n#     SQLModel.metadata.create_all(engine)\n\n@app.get('/')\ndef hello():\n    return 'hello'\n\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)\n    #create_db_and_tables()\n</code></pre>"},{"location":"lab1/#authpy","title":"auth.py:","text":"<pre><code>import datetime\n\nfrom fastapi import Security, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\nimport jwt\nfrom starlette import status\nfrom dotenv import load_dotenv\n\nfrom repos.user_repos import find_user\n\nimport os\n\nload_dotenv()\n\nsecret_key = os.getenv(\"SECRET_KEY\")\n#secret_key = 'secret_key'\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    secret = secret_key\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd)\n\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8),\n            'iat': datetime.datetime.utcnow(),\n            'sub': user_id\n        }\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail='Expired signature')\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail='Invalid token')\n\n    def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        return self.decode_token(auth.credentials)\n\n    def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        credentials_exception = HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail='Could not validate credentials'\n        )\n        username = self.decode_token(auth.credentials)\n        if username is None:\n            raise credentials_exception\n        user = find_user(username)\n        if username is None:\n            raise credentials_exception\n        return user\n</code></pre>"},{"location":"lab1/#main_endpointspy","title":"main_endpoints.py","text":"<pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom typing import List\nfrom sqlmodel import Session, select\nfrom endpoints.user_endpoints import auth_handler\nfrom db import session, get_session\nfrom models.main_models import Author, Author_Default, Publisher_Default, \\\n    Publisher, Book, Book_Default, WishList, WishList_Default, Acception, Publisher_Submodel\n\nmain_router = APIRouter()\n\n@main_router.get(\"/authors/{author_id}\")\ndef get_author(author_id: int):\n    author = session.get(Author, author_id)\n    if not author:\n        raise HTTPException(status_code=404, detail=\"Author not found\")\n    return author\n\n@main_router.post(\"/authors\")\ndef create_author(def_author: Author_Default,):\n    author = Author.model_validate(def_author)\n    session.add(author)\n    session.commit()\n    session.refresh(author)\n    return {\"status\": 200, \"data\": author}\n\n@main_router.get(\"/authors_list\")\ndef authors_list(session=Depends(get_session)) -&gt; List[Author]:\n    return session.exec(select(Author)).all()\n\n@main_router.delete(\"/authors/delete/{author_id}\")\ndef author_delete(author_id: int, session=Depends(get_session)):\n    author = session.get(Author, author_id)\n    if not author:\n        raise HTTPException(status_code=404, detail=\"Author not found\")\n    session.delete(author)\n    session.commit()\n    return {\"ok\": True}\n\n@main_router.patch(\"/authors/{author_id}\")\ndef author_update(author_id: int, author: Author_Default, session=Depends(get_session)) -&gt; Author_Default:\n    db_author = session.get(Author, author_id)\n    if not db_author:\n        raise HTTPException(status_code=404, detail=\"Author not found\")\n    author_data = author.model_dump(exclude_unset=True)\n    for key, value in author_data.items():\n        setattr(db_author, key, value)\n    session.add(db_author)\n    session.commit()\n    session.refresh(db_author)\n    return db_author\n\n@main_router.get(\"/publishers/{publisher_id}\",response_model=Publisher_Submodel)\ndef get_publisher(publisher_id: int):\n    publisher = session.get(Publisher, publisher_id)\n    if not publisher:\n        raise HTTPException(status_code=404, detail=\"Publisher not found\")\n    return publisher\n\n@main_router.post(\"/publishers\")\ndef create_publisher(def_publisher: Publisher_Default,):\n    publisher = Publisher.model_validate(def_publisher)\n    session.add(publisher)\n    session.commit()\n    session.refresh(publisher)\n    return {\"status\": 200, \"data\": publisher}\n\n@main_router.get(\"/publishers_list\")\ndef publishers_list(session=Depends(get_session)) -&gt; List[Publisher]:\n    return session.exec(select(Publisher)).all()\n\n@main_router.delete(\"/publishers/delete/{publisher_id}\")\ndef publisher_delete(publisher_id: int, session=Depends(get_session)):\n    publisher = session.get(Publisher, publisher_id)\n    if not publisher:\n        raise HTTPException(status_code=404, detail=\"Publisher not found\")\n    session.delete(publisher)\n    session.commit()\n    return {\"ok\": True}\n\n@main_router.patch(\"/publishers/{publisher_id}\")\ndef publisher_update(publisher_id: int, publisher: Publisher_Default, session=Depends(get_session)) -&gt; Publisher_Default:\n    db_publisher = session.get(Publisher, publisher_id)\n    if not db_publisher:\n        raise HTTPException(status_code=404, detail=\"Publisher not found\")\n    publisher_data = publisher.model_dump(exclude_unset=True)\n    for key, value in publisher_data.items():\n        setattr(db_publisher, key, value)\n    session.add(db_publisher)\n    session.commit()\n    session.refresh(db_publisher)\n    return db_publisher\n\n@main_router.get(\"/books/{book_id}\")\n    def get_book(book_id: int):\n        book = session.get(Book, book_id)\n        if not book:\n            raise HTTPException(status_code=404, detail=\"Book not found\")\n        return book\n\n    @main_router.post(\"/books\")\n    def create_book(def_book: Book_Default,user=Depends(auth_handler.get_current_user)):\n        book = Book(name=def_book.name, description=def_book.description, user_id=user.id)\n        session.add(book)\n        session.commit()\n        session.refresh(book)\n        return {\"status\": 200, \"data\": book}\n\n    @main_router.get(\"/books_list\")\n    def books_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[Book]:\n        return session.query(Book).filter(Book.user_id == user.id).all()\n\n    @main_router.delete(\"/books/delete/{book_id}\")\n    def book_delete(book_id: int, session=Depends(get_session),user=Depends(auth_handler.get_current_user)):\n        book = session.get(Book, book_id)\n        if not book:\n            raise HTTPException(status_code=404, detail=\"Book not found\")\n        if book.user_id == user.id:\n            session.delete(book)\n            session.commit()\n        else:\n            raise HTTPException(status_code=404, detail=\"You have no permission for doing this\")\n        return {\"ok\": True}\n\n    @main_router.post(\"/wishlists\")\n    def make_a_wish(wishlist: WishList_Default, user=Depends(auth_handler.get_current_user)):\n        book = session.get(Book, wishlist.book_id)\n        if not book:\n            raise HTTPException(status_code=404, detail=\"Book not found\")\n        wish = WishList(book_id=wishlist.book_id, user_id=user.id)\n        session.add(wish)\n        session.commit()\n        session.refresh(wish)\n        return {\"status\": 200, \"data\": wish}\n\n    @main_router.delete(\"/wishlists/delete/{book_id}\")\n    def wish_delete(book_id: int, session=Depends(get_session),user=Depends(auth_handler.get_current_user)):\n        book = session.get(Book, book_id)\n        if not book:\n            raise HTTPException(status_code=404, detail=\"Book not found\")\n        wish = session.query(WishList).filter(WishList.book_id == book_id, WishList.user_id == user.id).first()\n        if not wish:\n            raise HTTPException(status_code=404, detail=\"Wish not found\")\n        session.delete(wish)\n        session.commit()\n        return {\"ok\": True}\n\n    @main_router.put(\"/wishlists/accept/{book_id}\")\n    def wish_accept(book_id: int, acception: Acception, session=Depends(get_session),user=Depends(auth_handler.get_current_user)):\n        book = session.get(Book, book_id)\n        if not book:\n            raise HTTPException(status_code=404, detail=\"Book not found\")\n        wish = session.query(WishList).filter(WishList.book_id == book_id, WishList.user_id == user.id).first()\n        if not wish:\n            raise HTTPException(status_code=404, detail=\"Wish not found\")\n\n        for key, value in acception.dict(exclude_unset=True).items():\n            setattr(wish, key, value)\n        session.add(wish)\n        session.commit()\n        session.refresh(wish)\n        return {\"ok\": True}\n\n    @main_router.get(\"/books_list\")\n    def wishs_list(session=Depends(get_session), user=Depends(auth_handler.get_current_user)) -&gt; List[WishList]:\n        return session.query(WishList).filter(WishList.user_id == user.id).all()\n</code></pre>"},{"location":"lab1/#user_endpointspy","title":"user_endpoints.py","text":"<pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom starlette.responses import JSONResponse\nfrom starlette.status import HTTP_201_CREATED\nfrom auth.auth import AuthHandler\nfrom models.main_models import User\nfrom models.user_models import UserInput, UserLogin\nfrom repos.user_repos import select_all_users, find_user\nfrom db import session\n\nuser_router = APIRouter()\nauth_handler = AuthHandler()\n\n@user_router.post('/registration', status_code=201, tags=['users'], description='Register new user')\ndef register(user: UserInput):\n    users = select_all_users()\n    if any(x.username == user.username for x in users):\n        raise HTTPException(status_code=400, detail='Username is taken')\n    hashed_pwd = auth_handler.get_password_hash(user.password)\n    description = \"New user\"\n    u = User(username=user.username, password=hashed_pwd, email=user.email, description=description)\n    session.add(u)\n    session.commit()\n    return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"})\n\n@user_router.post('/login', tags=['users'])\ndef login(user: UserLogin):\n    user_found = find_user(user.username)\n    if not user_found:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    verified = auth_handler.verify_password(user.password, user_found.password)\n    if not verified:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    token = auth_handler.encode_token(user_found.username)\n    return {'token': token}\n\n@user_router.get(\"/pwd_change\")\ndef fresh_pwd(pwd, new_pwd, user=Depends(auth_handler.get_current_user)):\n    hashed_pwd = auth_handler.get_password_hash(pwd)\n    #print(hashed_pwd)\n    #print(user.password)\n    #if hashed_pwd == user.password:\n    new_hashed_pwd = auth_handler.get_password_hash(new_pwd)\n    session.query(User).filter(User.id == user.id).update({'password': new_hashed_pwd})\n    session.commit()\n    #else:\n        #raise HTTPException(status_code=401, detail=f'{hashed_pwd} {user.password}')\n\n@user_router.post('/users/me', tags=['users'])\ndef get_current_user(user: User = Depends(auth_handler.get_current_user)):\n    return user.username\n</code></pre>"},{"location":"lab1/#main_modelspy","title":"main_models.py:","text":"<pre><code>from typing import Optional\nfrom sqlmodel import SQLModel, Field, Relationship\n\nclass Author_Default(SQLModel):\n    name: str\n    info: str\n\nclass Author(Author_Default, table=True):\n    #__table_args__ = {'extend_existing': True}\n    id: Optional[int] = Field(default=None,primary_key=True)\n    books: list['Book'] = Relationship(back_populates='author')\n\nclass WishList_Default(SQLModel):\n    book_id: Optional[int] = Field(default=None, foreign_key=\"book.id\", primary_key=True)\n\nclass Acception(SQLModel):\n    is_accepted: Optional[bool] = Field(default=None, nullable=True)\n\nclass WishList(WishList_Default, table=True):\n    #__table_args__ = {'extend_existing': True}\n    #id: Optional[int] = Field(primary_key=True)\n    is_accepted: Optional[bool] = Field(default=None, nullable=True)\n    aboba: Optional[bool] = Field(default=None, nullable=True)\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\", primary_key=True)\n\nclass User_Default(SQLModel):\n    username: str = Field(index=True)\n    password: str\n    email: str\n    description: str\n\nclass User(User_Default, table=True):\n    #__table_args__ = {'extend_existing': True}\n    id: int = Field(default=None,primary_key=True)\n    user_books: list['Book'] = Relationship(back_populates='user')\n    books: list['Book'] = Relationship(back_populates=\"users\", link_model=WishList)\n\nclass Publisher_Default(SQLModel):\n    name: str\n    info: str\n\nclass Publisher_Submodel(Publisher_Default):\n    books: Optional[list['Book']] = None\n\nclass Publisher(Publisher_Default, table=True):\n    #__table_args__ = {'extend_existing': True}\n    id: Optional[int] = Field(default=None,primary_key=True)\n    books: list['Book'] = Relationship(back_populates='publisher')\n\nclass Book_Default(SQLModel):\n    name: str\n    description: str\n\nclass Book(Book_Default, table=True):\n    #__table_args__ = {'extend_existing': True}\n    id: Optional[int] = Field(primary_key=True)\n    user_id: int = Field(default=None, foreign_key=\"user.id\")\n    user: Optional[User] = Relationship(back_populates=\"user_books\")\n    author_id: int = Field(default=None, nullable=True, foreign_key=\"author.id\")\n    author: Optional[Author] = Relationship(back_populates=\"books\")\n    publisher_id: int = Field(default=None, nullable=True, foreign_key=\"publisher.id\")\n    publisher: Optional[Publisher] = Relationship(back_populates=\"books\")\n    users: list[User] = Relationship(back_populates=\"books\", link_model=WishList)\n</code></pre>"},{"location":"lab1/#user_modelspy","title":"user_models.py:","text":"<pre><code>from pydantic import validator\nfrom sqlmodel import SQLModel\n\nclass UserInput(SQLModel):\n    username: str\n    password: str\n    password2: str\n    email: str\n    @validator('password2')\n    def password_match(cls, v, values, **kwargs):\n        if 'password' in values and v != values['password']:\n            raise ValueError('passwords don\\'t match')\n        return v\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n</code></pre>"},{"location":"lab1/#dbpy","title":"db.py","text":"<pre><code>from sqlmodel import SQLModel, Session, create_engine\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\ndb_url = os.getenv('DB_URL')\nengine = create_engine(db_url, echo=True)\nsession = Session(bind=engine)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab2/","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162","text":""},{"location":"lab2/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:","text":"<p>\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p>"},{"location":"lab2/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lab2/#_2","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <ol> <li>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async.</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.</li> <li>\u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio.</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e.</li> <li>\u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</li> </ol>"},{"location":"lab2/#_3","title":"\u0425\u043e\u0434 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:","text":"<p>\u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u0432 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0433\u043e\u043c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u0434\u043e\u0431\u0438\u043b\u0438\u0441\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0443\u043c\u043c\u044b \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 python.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio - 0.8235228061676025 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e multiprocessing - 0.26959967613220215 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e threding - 0.7802841663360596</p>"},{"location":"lab2/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":""},{"location":"lab2/#_4","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <ol> <li>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async.</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430.</li> <li>\u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</li> </ol>"},{"location":"lab2/#_5","title":"\u0425\u043e\u0434 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:","text":"<p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 url. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0430\u0440\u0441\u0438\u043b\u0430\u0441\u044c \u0438 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043d\u043e\u0441\u0438\u043b\u0441\u044f title. \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c asyncio, multiprocessing \u0438 threading</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e asyncio </p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e multiprocessing </p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e threading </p>"},{"location":"lab2/#_6","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0432 python \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a threading, multiprocessing \u0438 async.</p>"}]}